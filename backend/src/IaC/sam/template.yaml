AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Recipe App API - Serverless Lambda Functions'

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: dotnet8
    Environment:
      Variables:
        ASPNETCORE_ENVIRONMENT: !Ref Environment

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  DatabaseConnectionString:
    Type: String
    Description: MySQL database connection string
    NoEcho: true

Resources:
  # Custom Authorizer
  CustomAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'recipe-app-authorizer-${Environment}'
      CodeUri: ../../Lambdas/Authorizer/
      Handler: Authorizer::Authorizer.Function::FunctionHandler
      Description: Custom authorizer for Recipe App API
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment

  # Recipe API
  RecipeApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'recipe-app-api-${Environment}'
      CodeUri: ../../Lambdas/Recipe/
      Handler: Recipe
      Description: Recipe management API
      Environment:
        Variables:
          ConnectionStrings__DefaultConnection: !Ref DatabaseConnectionString
      Events:
        ApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref RecipeAppApiGateway
            Path: /recipes
            Method: ANY
            Auth:
              Authorizer: CustomAuthorizer
        ApiProxy:
          Type: Api
          Properties:
            RestApiId: !Ref RecipeAppApiGateway
            Path: /recipes/{proxy+}
            Method: ANY
            Auth:
              Authorizer: CustomAuthorizer

  # User API
  UserApi:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'recipe-app-user-api-${Environment}'
      CodeUri: ../../Lambdas/User/
      Handler: User
      Description: User management API
      Environment:
        Variables:
          ConnectionStrings__DefaultConnection: !Ref DatabaseConnectionString
      Events:
        ApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref RecipeAppApiGateway
            Path: /users
            Method: ANY
            Auth:
              Authorizer: CustomAuthorizer
        ApiProxy:
          Type: Api
          Properties:
            RestApiId: !Ref RecipeAppApiGateway
            Path: /users/{proxy+}
            Method: ANY
            Auth:
              Authorizer: CustomAuthorizer

  # API Gateway
  RecipeAppApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'recipe-app-api-${Environment}'
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: CustomAuthorizer
        Authorizers:
          CustomAuthorizer:
            FunctionArn: !GetAtt CustomAuthorizer.Arn
            Identity:
              Headers:
                - Authorization
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # Lambda Permissions for API Gateway
  RecipeApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RecipeApi.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${RecipeAppApiGateway}/*/recipes'

  UserApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UserApi.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${RecipeAppApiGateway}/*/users'

  CustomAuthorizerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CustomAuthorizer.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${RecipeAppApiGateway}/*/*'

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${RecipeAppApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  RecipeApiFunction:
    Description: Recipe API Lambda Function ARN
    Value: !GetAtt RecipeApi.Arn
    Export:
      Name: !Sub '${AWS::StackName}-RecipeApiArn'

  UserApiFunction:
    Description: User API Lambda Function ARN
    Value: !GetAtt UserApi.Arn
    Export:
      Name: !Sub '${AWS::StackName}-UserApiArn'

  CustomAuthorizerFunction:
    Description: Custom Authorizer Lambda Function ARN
    Value: !GetAtt CustomAuthorizer.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AuthorizerArn'